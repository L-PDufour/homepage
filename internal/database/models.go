// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type ContentType string

const (
	ContentTypeBlog    ContentType = "blog"
	ContentTypeProject ContentType = "project"
	ContentTypeBio     ContentType = "bio"
)

func (e *ContentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContentType(s)
	case string:
		*e = ContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ContentType: %T", src)
	}
	return nil
}

type NullContentType struct {
	ContentType ContentType
	Valid       bool // Valid is true if ContentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContentType) Scan(value interface{}) error {
	if value == nil {
		ns.ContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContentType), nil
}

type Author struct {
	ID        int32
	Name      string
	Email     string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type Comment struct {
	ID        int32
	PostID    sql.NullInt32
	AuthorID  sql.NullInt32
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type Content struct {
	ID          int32
	Title       string
	Markdown    sql.NullString
	ImageUrl    sql.NullString
	Link        sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	ContentType ContentType
}

type Post struct {
	ID        int32
	Title     string
	Content   string
	AuthorID  sql.NullInt32
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type PostTag struct {
	PostID int32
	TagID  int32
}

type Tag struct {
	ID   int32
	Name string
}
