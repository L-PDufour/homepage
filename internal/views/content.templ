package views

import (
	"homepage/internal/database"
	"homepage/internal/markdown"
	"strconv"
)

func truncateMarkdown(content string, length int) string {
	if len(content) <= length {
		return content
	}
	return content[:length] + "..."
}

templ UnifiedContentView(contents []database.Content, contentType string, isAdmin bool) {
	@Base() {
		@chooseLayout(contents, contentType, isAdmin)
	}
}

templ chooseLayout(contents []database.Content, contentType string, isAdmin bool) {
	switch contentType {
		case "blog":
			@BlogLayout(contents, isAdmin)
		case "project":
			@ProjectLayout(contents, isAdmin)
		default:
			@UnifiedContentList(contents, contentType, isAdmin)
	}
}

templ BlogLayout(contents []database.Content, isAdmin bool) {
	<div class="container mx-auto px-4">
		<div class="flex flex-col md:flex-row">
			<div class="md:w-3/4 pr-4">
				@UnifiedContentList(contents, "blog", isAdmin)
			</div>
			<div class="md:w-1/4 mt-8 md:mt-0">
				<div class="bg-[#313244] p-4 rounded-lg">
					<h2 class="text-xl font-semibold mb-4 text-[#f2cdcd]">Recent Posts</h2>
					@RecentPosts(contents)
				</div>
			</div>
		</div>
	</div>
}

templ ProjectLayout(contents []database.Content, isAdmin bool) {
	<div class="max-w-7xl mx-auto p-4 sm:p-6 bg-[#414559] rounded-lg shadow-lg">
		@UnifiedContentList(contents, "project", isAdmin)
	</div>
}

templ RecentPosts(contents []database.Content) {
	<ul class="space-y-2">
		for _, content := range contents[:min(5, len(contents))] {
			if content.Type == "blog" {
				<li>
					<a
						href="#"
						hx-get={ string(templ.SafeURL("/content/view?id=" + strconv.Itoa(int(content.ID)))) }
						hx-target="#content"
						hx-swap="innerHTML"
						class="text-blue-400 hover:text-blue-300"
					>
						{ content.Title }
					</a>
				</li>
			}
		}
	</ul>
}

templ UnifiedContentList(contents []database.Content, contentType string, isAdmin bool) {
	<div class="max-w-7xl mx-auto p-4 sm:p-6 bg-[#414559] rounded-lg shadow-lg">
		<div id="content-container" class="space-y-4">
			for _, content := range contents {
				if content.Type == contentType {
					@UnifiedContent(content, isAdmin, false)
				}
			}
		</div>
		if isAdmin {
			<div class="mt-4 text-center">
				@NewContentButton(contentType)
			</div>
		}
	</div>
}

templ UnifiedContent(content database.Content, isAdmin bool, isEditing bool) {
	<div id={ "content-" + strconv.Itoa(int(content.ID)) } class="w-full">
		if !isEditing {
			@contentView(content, isAdmin)
		} else {
			@editContentSection(content)
		}
	</div>
}

templ contentView(content database.Content, isAdmin bool) {
	<div class="w-full mx-auto rounded-lg overflow-hidden bg-[#1e1e2e] shadow-md">
		<div class="p-4">
			@ContentSection(content)
		</div>
		if isAdmin {
			<div class="p-4 text-center">
				<button
					hx-get={ string(templ.SafeURL("/content/edit?id=" + strconv.Itoa(int(content.ID)))) }
					hx-target={ "#content-" + strconv.Itoa(int(content.ID)) }
					hx-swap="outerHTML"
					class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
				>
					Edit
				</button>
			</div>
		}
	</div>
}

templ FullContentSection(content database.Content) {
	<div id={ "content-wrapper-" + strconv.Itoa(int(content.ID)) } class="prose lg:prose-xl max-w-full mx-auto">
		<div class="mt-4">
			if htmlContent, err := markdown.GetHTMLContent(content.Markdown.String); err == nil {
				@templ.Raw(htmlContent)
			} else {
				<p>Error rendering content.</p>
			}
		</div>
		<button
			class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
			hx-get={ "/content/truncated?id=" + strconv.Itoa(int(content.ID)) }
			hx-target={ "#content-wrapper-" + strconv.Itoa(int(content.ID)) }
			hx-swap="innerHTML"
			hx-trigger="click"
		>
			Read Less
		</button>
	</div>
	@contentStyles()
}

templ ContentSection(content database.Content) {
	<div id={ "content-wrapper-" + strconv.Itoa(int(content.ID)) } class="prose lg:prose-xl max-w-full mx-auto">
		<div class="mt-4">
			if htmlContent, err := markdown.GetHTMLContent(content.Markdown.String); err == nil {
				@templ.Raw(truncateMarkdown(htmlContent, 200))
			} else {
				<p>Error rendering content.</p>
			}
		</div>
		<button
			class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
			hx-get={ "/content/full?id=" + strconv.Itoa(int(content.ID)) }
			hx-target={ "#content-wrapper-" + strconv.Itoa(int(content.ID)) }
			hx-swap="innerHTML"
			hx-trigger="click"
		>
			Read More
		</button>
	</div>
	@contentStyles()
}

templ editContentSection(content database.Content) {
	<form
		id={ "edit-form-" + strconv.Itoa(int(content.ID)) }
		hx-post={ string(templ.SafeURL("/content/update?id=" + strconv.Itoa(int(content.ID)))) }
		hx-target={ "#content-" + strconv.Itoa(int(content.ID)) }
		hx-swap="outerHTML"
	>
		<input type="hidden" name="type" value={ content.Type }/>
		<input type="hidden" name="id" value={ strconv.Itoa(int(content.ID)) }/>
		<input name="title" value={ content.Title } class="w-full p-2 border rounded mb-2"/>
		<textarea name="content" rows="10" class="w-full p-2 border rounded mb-2">{ content.Markdown.String }</textarea>
		if content.Type == "project" {
			<input type="url" name="link" value={ content.Link.String } placeholder="Project Link" class="w-full p-2 border rounded mb-2"/>
		}
		<input type="url" name="image_url" value={ content.ImageUrl.String } placeholder="Image URL" class="w-full p-2 border rounded mb-2"/>
		@editButtons(content.ID)
	</form>
}

templ editButtons(contentID int32) {
	<button type="submit" class="mt-2 bg-green-500 text-white px-4 py-2 rounded">Save Changes</button>
	<button
		type="button"
		hx-get={ string(templ.SafeURL("/content/view?id=" + strconv.Itoa(int(contentID)))) }
		hx-target={ "#content-" + strconv.Itoa(int(contentID)) }
		hx-swap="outerHTML"
		class="mt-2 ml-2 bg-red-500 text-white px-4 py-2 rounded"
	>Cancel</button>
	<button
		type="button"
		hx-delete={ string(templ.SafeURL("/content/delete?id=" + strconv.Itoa(int(contentID)))) }
		hx-confirm="Are you sure you want to delete this content?"
		hx-on="htmx:afterRequest: window.location.reload()"
		class="mt-2 ml-2 bg-red-500 text-white px-4 py-2 rounded"
	>Delete</button>
}

templ NewContentButton(contentType string) {
	<button
		hx-get={ string(templ.SafeURL("/content/new?type=" + contentType)) }
		hx-target="#content-form"
		hx-swap="beforeend"
		class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
	>
		Add New { contentType }
	</button>
	<div id="content-form"></div>
}

templ NewContentForm() {
	<form
		hx-post={ string(templ.SafeURL("/content/create")) }
		hx-target="#content-form"
		hx-swap="innerHTML"
		class="mt-4 p-4 border rounded"
	>
		<select name="type" class="w-full p-2 border rounded mb-2" required>
			<option value="">Select Content Type</option>
			<option value="blog">Blog Post</option>
			<option value="project">Project</option>
			<option value="bio">Bio</option>
		</select>
		<input type="text" name="title" placeholder="Title" class="w-full p-2 border rounded mb-2" required/>
		<textarea name="markdown" rows="10" placeholder="Content" class="w-full p-2 border rounded mb-2" required></textarea>
		<input type="url" name="image_url" placeholder="Image URL" class="w-full p-2 border rounded mb-2"/>
		<input type="url" name="link" placeholder="Link (for projects)" class="w-full p-2 border rounded mb-2"/>
		<button type="submit" class="mt-2 bg-green-500 text-white px-4 py-2 rounded">Submit</button>
	</form>
}

templ contentStyles() {
	<style>
        .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
            color: #f2cdcd;
        }
        .prose p, .prose ul, .prose ol {
            color: #cdd6f4;
        }
        .prose strong, .prose a {
            color: #f28fad;
            font-weight: bold;
        }
        .prose {
            padding-left: 0;
            padding-right: 0;
        }
    </style>
}
