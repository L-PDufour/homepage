package views

import (
	"homepage/internal/database"
	"homepage/internal/markdown"
	"strconv"
)

type ContentViewProps struct {
	Contents    []database.Content
	ContentType database.ContentType
	IsAdmin     bool
	IsEditing   bool
}

type ContentItemProps struct {
	Content   database.Content
	IsAdmin   bool
	IsEditing bool
}

func truncateMarkdown(content string, length int) string {
	if len(content) <= length {
		return content
	}
	return content[:length] + "..."
}

templ UnifiedContentView(props ContentViewProps) {
	@Base() {
		@chooseLayout(props)
	}
}

templ chooseLayout(props ContentViewProps) {
	if props.ContentType == database.ContentTypeBlog {
		@BlogLayout(props)
	} else if props.ContentType == database.ContentTypeProject {
		@ProjectLayout(props)
	} else {
		@UnifiedContentList(props)
	}
}

templ BlogLayout(props ContentViewProps) {
	<div class="container mx-auto px-4">
		<div class="flex flex-col lg:flex-row">
			<div class="lg:w-4/5 pr-4">
				@UnifiedContentList(props)
			</div>
			<div class="lg:w-1/5 mt-8 lg:mt-0">
				<div class="bg-[#313244] p-4 rounded-lg">
					<h2 class="text-xl font-semibold mb-4 text-[#f2cdcd]">Recent Posts</h2>
					@RecentPosts(props.Contents)
				</div>
			</div>
		</div>
	</div>
}

templ ProjectLayout(props ContentViewProps) {
	@UnifiedContentList(props)
}

templ RecentPosts(contents []database.Content) {
	<ul class="space-y-2">
		for _, content := range contents[:min(5, len(contents))] {
			if content.ContentType == database.ContentTypeBlog {
				<li>
					<a
						href="#"
						hx-get={ "/content/view?id=" + strconv.Itoa(int(content.ID)) }
						hx-target="#content"
						hx-swap="innerHTML"
						class="text-blue-400 hover:text-blue-300"
					>
						{ content.Title }
					</a>
				</li>
			}
		}
	</ul>
}

templ UnifiedContentList(props ContentViewProps) {
	<div class="w-full bg-[#414559] rounded-lg shadow-lg overflow-hidden">
		<div id="content-container" class="p-4 sm:p-6 space-y-4">
			for _, content := range props.Contents {
				if content.ContentType == props.ContentType {
					@UnifiedContent(ContentItemProps{Content: content, IsAdmin: props.IsAdmin, IsEditing: props.IsEditing})
				}
			}
		</div>
		if props.IsAdmin {
			<div class="mt-4 text-center">
				@NewContentButton(props.ContentType)
			</div>
		}
	</div>
}

templ UnifiedContent(props ContentItemProps) {
	<div id={ "content-" + strconv.Itoa(int(props.Content.ID)) } class="w-full">
		if !props.IsEditing {
			@contentView(props)
		} else {
			@editContentSection(props.Content)
		}
	</div>
}

templ contentView(props ContentItemProps) {
	<div class="w-full mx-auto rounded-lg overflow-hidden bg-[#1e1e2e] shadow-md">
		<div class="p-4">
			@ContentSection(props.Content)
		</div>
		if props.IsAdmin {
			<div class="p-4 text-center">
				<button
					hx-get={ "/content/edit?id=" + strconv.Itoa(int(props.Content.ID)) }
					hx-target={ "#content-" + strconv.Itoa(int(props.Content.ID)) }
					hx-swap="outerHTML"
					class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
				>
					Edit
				</button>
			</div>
		}
	</div>
}

templ FullContentSection(content database.Content) {
	<div id={ "content-wrapper-" + strconv.Itoa(int(content.ID)) } class="prose lg:prose-xl max-w-full mx-auto">
		<div class="mt-4">
			if htmlContent, err := markdown.GetHTMLContent(content.Markdown.String); err == nil {
				@templ.Raw(htmlContent)
			} else {
				<p>Error rendering content.</p>
			}
		</div>
		if content.ContentType != "bio" {
			<button
				class="inline-block bg-[#89b4fa] text-[#1e1e2e] px-3 py-1 rounded text-sm hover:bg-[#74c7ec] transition-colors duration-200"
				hx-get={ "/content/truncated?id=" + strconv.Itoa(int(content.ID)) }
				hx-target={ "#content-wrapper-" + strconv.Itoa(int(content.ID)) }
				hx-swap="innerHTML"
				hx-trigger="click"
			>
				Read Less
			</button>
		}
	</div>
}

templ ContentSection(content database.Content) {
	<div id={ "content-wrapper-" + strconv.Itoa(int(content.ID)) } class="prose lg:prose-xl max-w-full mx-auto">
		<div class="mt-4">
			if htmlContent, err := markdown.GetHTMLContent(content.Markdown.String); err == nil {
				if content.ContentType == "bio" {
					@templ.Raw(htmlContent)
				} else {
					@templ.Raw(truncateMarkdown(htmlContent, 200))
				}
			} else {
				<p>Error rendering content.</p>
			}
		</div>
		if content.ContentType != "bio" {
			<button
				class="inline-block bg-[#89b4fa] text-[#1e1e2e] px-3 py-1 rounded text-sm hover:bg-[#74c7ec] transition-colors duration-200"
				hx-get={ "/content/full?id=" + strconv.Itoa(int(content.ID)) }
				hx-target={ "#content-wrapper-" + strconv.Itoa(int(content.ID)) }
				hx-swap="innerHTML"
				hx-trigger="click"
			>
				Read More
			</button>
		}
	</div>
}

templ editContentSection(content database.Content) {
	<form
		id={ "edit-form-" + strconv.Itoa(int(content.ID)) }
		hx-post={ "/content/update?id=" + strconv.Itoa(int(content.ID)) }
		hx-target={ "#content-" + strconv.Itoa(int(content.ID)) }
		hx-swap="outerHTML"
	>
		<input type="hidden" name="type" value={ string(content.ContentType) }/>
		<input type="hidden" name="id" value={ strconv.Itoa(int(content.ID)) }/>
		<input name="title" value={ content.Title } class="w-full p-2 border rounded mb-2"/>
		<textarea name="content" rows="10" class="w-full p-2 border rounded mb-2">{ content.Markdown.String }</textarea>
		if content.ContentType == database.ContentTypeProject {
			<input type="url" name="link" value={ content.Link.String } placeholder="Project Link" class="w-full p-2 border rounded mb-2"/>
		}
		<input type="url" name="image_url" value={ content.ImageUrl.String } placeholder="Image URL" class="w-full p-2 border rounded mb-2"/>
		@editButtons(content.ID)
	</form>
}

templ editButtons(contentID int32) {
	<button type="submit" class="mt-2 bg-green-500 text-white px-4 py-2 rounded">Save Changes</button>
	<button
		type="button"
		hx-get={ "/content/view?id=" + strconv.Itoa(int(contentID)) }
		hx-target={ "#content-" + strconv.Itoa(int(contentID)) }
		hx-swap="outerHTML"
		class="mt-2 ml-2 bg-red-500 text-white px-4 py-2 rounded"
	>Cancel</button>
	<button
		type="button"
		hx-delete={ "/content/delete?id=" + strconv.Itoa(int(contentID)) }
		hx-confirm="Are you sure you want to delete this content?"
		hx-on="htmx:afterRequest: window.location.reload()"
		class="mt-2 ml-2 bg-red-500 text-white px-4 py-2 rounded"
	>Delete</button>
}

templ NewContentButton(contentType database.ContentType) {
	<button
		hx-get={ "/content/new?type=" + string(contentType) }
		hx-target="#content-form"
		hx-swap="beforeend"
		class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
	>
		Add New { string(contentType) }
	</button>
	<div id="content-form"></div>
}

templ NewContentForm() {
	<form
		hx-post="/content/create"
		hx-target="#content-form"
		hx-swap="innerHTML"
		class="mt-4 p-4 border rounded"
	>
		<select name="type" class="w-full p-2 border rounded mb-2" required>
			<option value="">Select Content Type</option>
			<option value="blog">Blog Post</option>
			<option value="project">Project</option>
			<option value="bio">Bio</option>
		</select>
		<input type="text" name="title" placeholder="Title" class="w-full p-2 border rounded mb-2" required/>
		<textarea name="markdown" rows="10" placeholder="Content" class="w-full p-2 border rounded mb-2" required></textarea>
		<input type="url" name="image_url" placeholder="Image URL" class="w-full p-2 border rounded mb-2"/>
		<input type="url" name="link" placeholder="Link (for projects)" class="w-full p-2 border rounded mb-2"/>
		<button type="submit" class="mt-2 bg-green-500 text-white px-4 py-2 rounded">Submit</button>
	</form>
}

templ ContentStyles() {
	<style>
:root {
    --rosewater: #f5e0dc;
    --flamingo: #f2cdcd;
    --pink: #f5c2e7;
    --mauve: #cba6f7;
    --red: #f38ba8;
    --maroon: #eba0ac;
    --peach: #fab387;
    --yellow: #f9e2af;
    --green: #a6e3a1;
    --teal: #94e2d5;
    --sky: #89dceb;
    --sapphire: #74c7ec;
    --blue: #89b4fa;
    --lavender: #b4befe;
    --text: #cdd6f4;
    --subtext1: #bac2de;
    --subtext0: #a6adc8;
    --overlay2: #9399b2;
    --overlay1: #7f849c;
    --overlay0: #6c7086;
    --surface2: #585b70;
    --surface1: #45475a;
    --surface0: #313244;
    --base: #1e1e2e;
    --mantle: #181825;
    --crust: #11111b;
}

.prose {
    color: var(--text);
    padding-left: 0;
    padding-right: 0;
}

.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: var(--flamingo);
    font-weight: bold;
}

.prose p, .prose ul, .prose ol {
    color: var(--text);
}

.prose strong {
    color: var(--red);
    font-weight: bold;
}

.prose a {
    color: var(--pink);
    text-decoration: underline;
    transition: color 0.3s ease;
}

.prose a:hover {
    color: var(--mauve);
}

.prose blockquote {
    border-left: 4px solid var(--overlay0);
    padding-left: 1rem;
    color: var(--subtext0);
}

.prose code {
    background-color: var(--surface0);
    color: var(--green);
    padding: 0.2em 0.4em;
    border-radius: 3px;
}

.prose pre {
    background-color: var(--surface0);
    padding: 1rem;
    border-radius: 5px;
    overflow-x: auto;
}

.prose img {
    max-width: 100%;
    height: auto;
    border-radius: 5px;
}

.prose hr {
    border: none;
    border-top: 1px solid var(--surface1);
    margin: 2rem 0;
}

.prose table {
    border-collapse: collapse;
    width: 100%;
}

.prose th, .prose td {
    border: 1px solid var(--surface1);
    padding: 0.5rem;
}

.prose th {
    background-color: var(--surface0);
    font-weight: bold;
}
    </style>
}
